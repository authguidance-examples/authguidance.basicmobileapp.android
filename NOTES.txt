PRIORITY
--------
1. Create further view model classes with a view folder layout similar to React
   Include error details dialog
   Debug activity / fragment recreation after orientation changes / deep links / logins + logouts

2. Finish device not secured fragment and use a lighter green
   Test topmost and ensure that deep links do not run views they should not

3. References to global objects in fragments
   Google to understand issues for React / Swift / Kotlin
   Store optional references and set to null on exit

4. Blank out Okta logoutEndpoint from config and use end session endpoint from metadata
   Reduce logout code
   Ignore logout errors as for other samples
   Add exceptionFromMessage and use it to check responses for null

5. Use consistent ids in layout files, with lower case and underscores

6. Test back navigation - including with errors - and keep code simple

IOS
---
1. iOS device check to also check biometrics only

2. Deep link when Safari View Controller active for iOS to ignore
   Add isTopMost logic

3. Use view model classes?

4. Use a strings source file in iOS
